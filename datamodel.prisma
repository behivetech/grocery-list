type User {
    id: ID! @id
    createdAt: DateTime! @createdAt
    email: String! @unique
    hash: String!
    salt: String!
    name: String!
    lists: [List] @relation(name: "ListUser", onDelete: CASCADE)
    sharedLists: [List] @relation(name: "SharedLists", onDelete: CASCADE)
    userGroups: [UserGroup] @relation(name: "UserGroup", onDelete: CASCADE)
    sessions: [UserSession]! @relation(onDelete: CASCADE)
    updatedAt: DateTime! @updatedAt
    myGroups: [UserGroup] @relation(name: "UserGroupOwner", onDelete: CASCADE)
}

type UserSession {
    id: ID! @id
    createdAt: DateTime! @createdAt
    ttl: Int!
    user: User! @relation(link: INLINE)
}

type UserGroup {
    id: ID! @id
    createdAt: DateTime! @createdAt
    users: [User!]! @relation(link: TABLE, name: "UserUserGroup")
    owner: User! @relation(name: "UserGroupOwner")
    name: String!
    updatedAt: DateTime! @updatedAt
    invites: [UserGroupInvite]! @relation(name: "UserGroupInvites", onDelete: CASCADE)
}

type UserGroupInvite {
    id: ID! @id
    createdAt: DateTime! @createdAt
    email: String!
    updatedAt: DateTime! @updatedAt
    userGroup: UserGroup! @relation(link: INLINE, name: "UserGroupInvites")
}

type List {
    id: ID! @id
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
    collaborated: Boolean! @default(value: false)
    name: String!
    owner: User! @relation(link: INLINE, name: "ListUser")
    sharedWith: [User] @relation(link: TABLE, name: "SharedLists", onDelete: CASCADE)
    items: [Item]! @relation(onDelete: CASCADE)
}

type Item {
    id: ID! @id
    createdAt: DateTime! @createdAt
    list: List! @relation(link: INLINE)
    name: String!
    need: Boolean! @default(value: false)
    purchased: Boolean! @default(value: false)
    updatedAt: DateTime! @updatedAt
}
